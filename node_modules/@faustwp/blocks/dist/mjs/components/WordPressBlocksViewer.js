import React from 'react';
import resolveBlockTemplate from '../resolveBlockTemplate.js';
import { WordPressBlocksContext } from './WordPressBlocksProvider.js';
const Context = React.createContext(null);
export const useBlockData = () => {
    const contextState = React.useContext(Context);
    if (contextState === null) {
        throw new Error('useBlockData must be used within a BlockDataProvider tag');
    }
    return contextState;
};
export function BlockDataProvider(props) {
    const { children, data } = props;
    const ref = React.useRef(data);
    return React.createElement(Context.Provider, { value: ref.current }, children);
}
/**
 * WordPressBlocksViewer is the main component that renders blocks taken from WordPress as a list of ContentBlock[] data.
 * @param props WordpressBlocksViewerProps
 * @returns JSX.Component that renders the block tree.
 */
export function WordPressBlocksViewer(props) {
    const { blocks } = React.useContext(WordPressBlocksContext);
    if (!blocks) {
        throw new Error('Blocks are required. Please add them to your config.');
    }
    const { blocks: editorBlocks } = props;
    if (!editorBlocks) {
        throw new Error('The "blocks" prop is required in <WordPressBlocksViewer>');
    }
    const renderedBlocks = editorBlocks.map((blockProps, idx) => {
        const BlockTemplate = resolveBlockTemplate(blockProps, blocks);
        return (
        // eslint-disable-next-line react/no-array-index-key
        React.createElement(BlockDataProvider, { data: blockProps, key: idx },
            React.createElement(React.Fragment, null, React.createElement(BlockTemplate, Object.assign({}, blockProps)))));
    });
    // eslint-disable-next-line react/jsx-no-useless-fragment
    return React.createElement(React.Fragment, null, renderedBlocks);
}
